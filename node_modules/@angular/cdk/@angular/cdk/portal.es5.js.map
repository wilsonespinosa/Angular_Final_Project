{"version":3,"file":"portal.es5.js","sources":["../../../src/cdk/portal/index.ts","../../../src/cdk/portal/portal-directives.ts","../../../src/cdk/portal/dom-portal-host.ts","../../../src/cdk/portal/portal.ts","../../../src/cdk/portal/portal-errors.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ComponentType,Portal,ComponentPortal,TemplatePortal,PortalHost,BasePortalHost,DomPortalHost,TemplatePortalDirective,PortalHostDirective,PortalModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    NgModule,\n    ComponentRef,\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    OnDestroy,\n    Input,\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n * \n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-portal], [cdkPortal], [portal]',\n  exportAs: 'cdkPortal',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n * \n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\n/**\n * The attached portal.\n */\nprivate _portal: Portal<any> | null = null;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> | null {\n    return this._portal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any> | null) {\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._portal = portal;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.dispose();\n    this._portal = null;\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n * \n * @template T\n * @param {?} portal Portal to be attached to the portal host.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    let /** @type {?} */ componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.parentInjector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._portal = portal;\n\n    return ref;\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    portal.setAttachedHost(this);\n\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._portal = portal;\n\n    // TODO(jelbourn): return locals from view\n    return new Map<string, any>();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkPortalHost], [portalHost]',\n  inputs: ['portal: cdkPortalHost']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [TemplatePortalDirective, PortalHostDirective],\n  declarations: [TemplatePortalDirective, PortalHostDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n * \n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\n    super();\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n * @template T\n * @param {?} portal Portal to be attached\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n    // To move the view to the specified host element. We just re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return new Map<string, any>();\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\n    super.dispose();\n    if (this._hostDomElement.parentNode != null) {\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n    }\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    Injector\n} from '@angular/core';\nimport {\n    throwNullPortalHostError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalHostAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\n\n\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost | null;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\n    if (host == null) {\n      throwNullPortalHostError();\n    }\n\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return /** @type {?} */(( <T> host.attach(this)));\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\n    let /** @type {?} */ host = this._attachedHost;\n\n    if (host == null) {\n      throwNoPortalAttachedError();\n    } else {\n      this._attachedHost = null;\n      host.detach();\n    }\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\n * the PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost | null) {\n    this._attachedHost = host;\n  }\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n/**\n * The type of the component that will be instantiated for attachment.\n */\ncomponent: ComponentType<T>;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n */\nviewContainerRef?: ViewContainerRef | null;\n/**\n * [Optional] Injector used for the instantiation of the component.\n */\ninjector?: Injector | null;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\n      component: ComponentType<T>,\n      viewContainerRef?: ViewContainerRef | null,\n      injector?: Injector | null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n  }\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal extends Portal<Map<string, any>> {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n */\ntemplateRef: TemplateRef<any>;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n */\nlocals: Map<string, any> = new Map<string, any>();\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n/**\n * @param {?} host\n * @param {?=} locals\n * @return {?}\n */\nattach(host: PortalHost, locals?: Map<string, any>): Map<string, any> {\n    this.locals = locals == null ? new Map<string, any>() : locals;\n    return super.attach(host);\n  }\n/**\n * @return {?}\n */\ndetach(): void {\n    this.locals = new Map<string, any>();\n    return super.detach();\n  }\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n * @type {?}\n */\nTemplatePortal.prototype.locals;\n}\n\n\n\n/**\n * A `PortalHost` is an space that can contain a single `Portal`.\n */\nexport interface PortalHost {\n  attach(portal: Portal<any>): any;\n\n  detach(): any;\n\n  dispose(): void;\n\n  hasAttached(): boolean;\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\n/**\n * The portal currently attached to the host.\n */\nprivate _attachedPortal: Portal<any> | null;\n/**\n * A function that will permanently dispose this host.\n */\nprivate _disposeFn: (() => void) | null;\n/**\n * Whether this host has already been permanently disposed.\n */\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\n    if (!portal) {\n      throwNullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throwPortalHostAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throwUnknownPortalTypeError();\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal) {}\n/**\n * @return {?}\n */\ndetach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n/**\n * @return {?}\n */\ndispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\n","\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalHostAlreadyDisposedError() {\n  throw Error('This PortalHost has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nexport function throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalHost accepts either' +\n                  'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalHostError() {\n  throw Error('Attempting to attach a portal to a null PortalHost');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-privatew\n * @return {?}\n */\nexport function throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n"],"names":[],"mappings":"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"}