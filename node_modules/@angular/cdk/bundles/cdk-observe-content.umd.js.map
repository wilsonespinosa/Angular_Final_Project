{"version":3,"file":"cdk-observe-content.umd.js","sources":["../../src/cdk/observe-content/index.ts","../../src/cdk/observe-content/observe-content.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdMutationObserverFactory,ObserveContent,ObserveContentModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  NgModule,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {RxChain, debounceTime} from '@angular/cdk/rxjs';\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nexport class MdMutationObserverFactory {\n/**\n * @param {?} callback\n * @return {?}\n */\ncreate(callback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMutationObserverFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMutationObserverFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMutationObserverFactory.ctorParameters;\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver | null;\n/**\n * Event emitted for each change in the element's content.\n */\nevent = new EventEmitter<MutationRecord[]>();\n/**\n * Used for debouncing the emitted values to the observeContent event.\n */\nprivate _debouncer = new Subject<MutationRecord[]>();\n/**\n * Debounce interval for emitting the changes.\n */\ndebounce: number;\n/**\n * @param {?} _mutationObserverFactory\n * @param {?} _elementRef\n */\nconstructor(\nprivate _mutationObserverFactory: MdMutationObserverFactory,\nprivate _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this.debounce > 0) {\n      RxChain.from(this._debouncer)\n        .call(debounceTime, this.debounce)\n        .subscribe((mutations: MutationRecord[]) => this.event.emit(mutations));\n    } else {\n      this._debouncer.subscribe(mutations => this.event.emit(mutations));\n    }\n\n    this._observer = this._mutationObserverFactory.create((mutations: MutationRecord[]) => {\n      this._debouncer.next(mutations);\n    });\n\n    if (this._observer) {\n      this._observer.observe(this._elementRef.nativeElement, {\n        characterData: true,\n        childList: true,\n        subtree: true\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._observer) {\n      this._observer.disconnect();\n      this._debouncer.complete();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkObserveContent]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdMutationObserverFactory, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n'debounce': [{ type: Input },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/**\n * Used for debouncing the emitted values to the observeContent event.\n * @type {?}\n */\nObserveContent.prototype._debouncer;\n/**\n * Debounce interval for emitting the changes.\n * @type {?}\n */\nObserveContent.prototype.debounce;\n/** @type {?} */\nObserveContent.prototype._mutationObserverFactory;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n}\n\nexport class ObserveContentModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [ObserveContent],\n  declarations: [ObserveContent],\n  providers: [MdMutationObserverFactory]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserveContentModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContentModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContentModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["Input","ElementRef","debounceTime","RxChain"],"mappings":";;;;;;;;;;;;;;;;;;IC0BA,SAAA,yBAAA,GAAA;;;;;;IAMA,yBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAA,QAAA,EAAA;QACA,OAAA,OAAA,gBAAA,KAAA,WAAA,GAAA,IAAA,GAAA,IAAA,gBAAA,CAAA,QAAA,CAAA,CAAA;;IAFA,OAAA,yBAAO,CAAP;CAIA,EAAA,CAAA,CAAA;AACA,yBAAA,CAAA,UAAA,GAAA;;;;;;;;;;;;;;;;IAsBA,SAAA,cAAY,CAAZ,wBAAA,EAAA,WAAA,EAAA;;;;;;;;;;;;;;;IA0BA,cAAA,CAAa,SAAb,CAtBoB,kBAsBpB,GAAA,YAAA;QACA,IAAA,KAAS,GAAT,IAAA,CAAA;QACA,IAAA,IAAA,CAAS,QAAT,GAtBoB,CAsBpB,EAAA;YACAG,yBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,UAAA,CAAA;iBAtBA,IAAA,CAAAD,8BAAA,EAAA,IAAA,CAAA,QAAA,CAAA;iBACW,SAsBX,CAtBY,UAAW,SAsBvB,EAAA,EAAA,OAAA,KAtBwD,CAsBxD,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA;SACK;aApBI;YAuBH,IAAI,CAtBC,UAAC,CAAU,SAsBtB,CAAA,UAAA,SAAA,EAAA,EAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA;SACK;QAED,IAAI,CAAR,SAAA,GAAA,IAAA,CAAA,wBAAA,CAAA,MAAA,CAAA,UAAA,SAAA,EAAA;YACM,KAtBK,CAsBX,UAAA,CAAA,IAAA,CAtBsB,SAsBtB,CAAA,CAAA;SACA,CAAA,CAAA;QACA,IAAA,IAAQ,CAAR,SAAA,EAAA;YACA,IAAQ,CAAR,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,WAAA,CAAA,aAAA,EAAA;gBACA,aAAA,EAAA,IAAA;gBACA,SAAA,EAAA,IAAA;gBACA,OAAA,EAAA,IAAA;;;;;;;IAOA,cAAA,CAAA,SAxBsB,CAwBtB,WAAA,GAAA,YAAA;QACA,IAAA,IAAA,CAAA,SAAA,EAAA;YACA,IAAA,CAAA,SAAA,CAAA,UAAA,EAAA,CAAA;;SAvBA;KAyBA,CAxBE;IAyBF,OAAA,cAAA,CAxBY;CAyBZ,EAAA,CAAA,CAAA;AACA,cAAA,CAAA,UAAA,GAAA;;;;CAtBA,CAAA;;;;AAIO,cAAP,CAAA,cAAO,GAAyD,YAAhE,EAAA,OAAA;IA2BA,EAAA,IAAA,EAAA,yBA1BgC,GA0BhC;IACA,EAAA,IAAA,EAAAD,wBAAA,GA1BqB;CA2BpB,CA1BC,EA0BF,CAAA;AAGA,cAAA,CAAA,cAAA,GAAA;;IAxBA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,mBAAA,EAAA,EAA8E;CA0D9E,CAAA;AACA,IAAA,oBAAA,IAAA,YAzDa;IA0Db,SAAA,oBAAA,GAAA;KACA;IACA,OAAA,oBAAA,CAAA;CACC,EAAD,CAAA,CAAA;;;;gBAvDA,YAAA,EAAA,CAAA,cAAA,CA4DC;;aD9KD,EAAA,EAAA;;;;;;;;;;;;;"}